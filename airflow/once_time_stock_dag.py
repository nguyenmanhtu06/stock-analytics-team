from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta
import pandas as pd
from vnstock import Vnstock
from sqlalchemy import create_engine, text

# ======================
# CONFIG
# ======================
user = "postgres"
password = "postgres"
host = "postgres"
port = "5432"
database = "stockdb"
table_name = "once_time_stock"

conn_str = f"postgresql+psycopg2://{user}:{password}@{host}:{port}/{database}"

# ======================
# FUNCTION
# ======================

def get_all_symbols_today():
    """
    L·∫•y danh s√°ch m√£ c·ªï phi·∫øu ƒëang ƒë∆∞·ª£c giao d·ªãch t·∫°i th·ªùi ƒëi·ªÉm hi·ªán t·∫°i (theo VCI).
    """
    try:
        vnstock_client = Vnstock()
        df_listed = vnstock_client.listing.symbols(source='VCI')
        symbols = df_listed['symbol'].dropna().unique().tolist()
        print(f"üìà Ph√°t hi·ªán {len(symbols)} m√£ c·ªï phi·∫øu hi·ªán c√≥ tr√™n th·ªã tr∆∞·ªùng.")
        return symbols
    except Exception as e:
        raise RuntimeError(f"L·ªói khi qu√©t danh s√°ch m√£ m·ªõi: {e}")


def update_stock_price_nearest_to_postgres(symbol, table_name, engine):
    """C·∫≠p nh·∫≠t d·ªØ li·ªáu c·ªï phi·∫øu m·ªõi nh·∫•t cho 1 m√£ t·ª´ vnstock v√†o PostgreSQL."""
    try:
        query = text(f"SELECT * FROM {table_name} WHERE symbol = :symbol")
        df_old = pd.read_sql(query, engine, params={"symbol": symbol})

        if not df_old.empty and 'time' in df_old.columns:
            df_old['time'] = pd.to_datetime(df_old['time'])
            last_date = df_old['time'].max()
            start_date = (last_date + timedelta(days=1)).strftime('%Y-%m-%d')
        else:
            start_date = '2024-01-01'

        stock = Vnstock().stock(symbol=symbol, source='VCI')
        df_new = stock.quote.history(
            start=start_date,
            end=datetime.today().strftime('%Y-%m-%d')
        )

        if df_new.empty:
            print(f"‚úÖ {symbol}: kh√¥ng c√≥ d·ªØ li·ªáu m·ªõi.")
            return

        df_new['symbol'] = symbol
        df_new.to_sql(table_name, engine, if_exists='append', index=False)
        print(f"‚úÖ {symbol}: ƒë√£ th√™m {len(df_new)} d√≤ng m·ªõi.")

    except Exception as e:
        print(f"‚ö†Ô∏è B·ªè qua {symbol}: {e}")
        return


def run_update_all_symbols():
    """
    H√†m ch√≠nh Airflow ch·∫°y:
    - Qu√©t danh s√°ch m√£ c·ªï phi·∫øu m·ªõi nh·∫•t t·ª´ VCI.
    - So s√°nh v·ªõi danh s√°ch ƒë√£ c√≥ trong database.
    - Th√™m m·ªõi n·∫øu c√≥ m√£ ch∆∞a c√≥.
    - C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ng m√£.
    """
    engine = create_engine(conn_str)

    # 1Ô∏è‚É£ Qu√©t danh s√°ch m√£ hi·ªán c√≥ tr√™n th·ªã tr∆∞·ªùng
    all_symbols = get_all_symbols_today()

    # 2Ô∏è‚É£ L·∫•y danh s√°ch ƒë√£ c√≥ trong DB
    try:
        df_existing = pd.read_sql(f"SELECT DISTINCT symbol FROM {table_name}", engine)
        existing_symbols = df_existing['symbol'].tolist()
    except Exception:
        existing_symbols = []
        print("‚ö†Ô∏è B·∫£ng tr·ªëng ho·∫∑c ch∆∞a t·ªìn t·∫°i, s·∫Ω t·∫°o m·ªõi to√†n b·ªô.")

    # 3Ô∏è‚É£ So s√°nh ƒë·ªÉ t√¨m m√£ m·ªõi
    new_symbols = [s for s in all_symbols if s not in existing_symbols]
    print(f"üÜï C√≥ {len(new_symbols)} m√£ m·ªõi c·∫ßn th√™m.")

    # 4Ô∏è‚É£ Danh s√°ch c·∫≠p nh·∫≠t = t·∫•t c·∫£ (c≈© + m·ªõi)
    all_to_update = sorted(set(existing_symbols + new_symbols))
    print(f"üöÄ T·ªïng c·ªông {len(all_to_update)} m√£ s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")

    # 5Ô∏è‚É£ C·∫≠p nh·∫≠t t·ª´ng m√£
    for symbol in all_to_update:
        update_stock_price_nearest_to_postgres(symbol, table_name, engine)

    print("üéØ Ho√†n t·∫•t c·∫≠p nh·∫≠t to√†n b·ªô.")


# ======================
# DAG DEFINITION
# ======================
default_args = {
    "owner": "airflow",
    "depends_on_past": False,
    "email_on_failure": False,
    "retries": 1,
    "retry_delay": timedelta(minutes=10),
}

with DAG(
    dag_id="el_daily_update_once_time_stock",
    default_args=default_args,
    description="Extract & Load d·ªØ li·ªáu m·ªói ng√†y (t·ª± qu√©t m√£ m·ªõi)",
    schedule_interval="@daily",
    start_date=datetime(2025, 10, 23),
    catchup=False,
    tags=["EL", "daily"],
) as dag:

    update_data = PythonOperator(
        task_id="extract_and_load_data",
        python_callable=run_update_all_symbols,
    )

    update_data
